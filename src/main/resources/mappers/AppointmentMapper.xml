<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="patient_management_system.dao.AppointmentMapper">

    <resultMap id="AppointmentResultMap" type="patient_management_system.models.Appointment">
        <id column="id" property="id"/>
        <result column="doctor_id" property="doctorId"/>
        <result column="patient_id" property="patientId"/>
        <result column="date" property="date"/>
        <result column="time" property="time"/>
        <result column="status" property="status"/>
        <result column="remarks" property="remarks"/>
        <result column="capacity" property="capacity"/>
        <result column="created_at" property="createdAt"/>
        <result column="created_by" property="createdBy"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="updated_by" property="updatedBy"/>
    </resultMap>

    <select id="findAll" resultMap="AppointmentResultMap">
        SELECT * FROM appointments_tbl
    </select>

    <select id="findById" resultMap="AppointmentResultMap" parameterType="string">
        SELECT * FROM appointments_tbl WHERE id = #{id}
    </select>

    <select id="findByEmail" resultMap="AppointmentResultMap" parameterType="string">
        SELECT * FROM appointments_tbl WHERE email = #{email}
    </select>

    <insert id="addUser">
        INSERT INTO
            appointments_tbl(id,doctor_id,patient_id,date,time,
            status,remarks,capacity,created_at,created_by)
        VALUES(#{id},#{doctorId},#{patientId},#{date},#{time},
               #{status},#{remarks},#{capacity},#{createdAt},#{createdBy})
    </insert>

    <update id="updateById">
        UPDATE appointments_tbl
        SET doctor_id=#{doctorId},patient_id=#{patientId},date=#{date},
        time=#{time},remarks=#{remarks},status=#{status},updated_at=#{updatedAt},
        capacity=#{capacity},updated_by=#{updatedBy}
        WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="string">
        DELETE FROM appointments_tbl WHERE id = #{id}
    </delete>

    <select id="countAppointmentsByDate" resultType="int">
        SELECT COUNT(*) FROM appointments_tbl
        WHERE date=#{date} AND doctor_id=#{doctorId}
    </select>

    <select id="checkOverLapping" resultType="int">
        SELECT COUNT(*) FROM appointments_tbl
        WHERE date = #{date} AND (doctor_id=#{doctorId})
          AND (
            (#{startTime} BETWEEN start_time AND end_time)
           OR (#{endTime} BETWEEN start_time AND end_time)
           OR (start_time BETWEEN #{startTime} AND #{endTime})
           OR (end_time BETWEEN #{startTime} AND #{endTime})
            )
    </select>

    <select id="getPaginatedAppointments" resultMap="AppointmentMapper">
        SELECT * FROM appointments_tbl ORDER BY id LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countAllAppointments" resultType="int">
        SELECT COUNT(*) FROM appointments_tbl
    </select>

</mapper>